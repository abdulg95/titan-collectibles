"""add template_code & backfill

Revision ID: 880992a02a5c
Revises: 2f186be955c4
Create Date: 2025-09-07 21:17:56.133685

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '880992a02a5c'
down_revision = '2f186be955c4'
branch_labels = None
depends_on = None


def upgrade():
     # --- ensure enums exist (no-op if already created) ---
    op.execute("""
    DO $$ BEGIN
      CREATE TYPE archery_discipline AS ENUM ('compound','recurve','barebow','other');
    EXCEPTION WHEN duplicate_object THEN NULL; END $$;
    """)
    op.execute("""
    DO $$ BEGIN
      CREATE TYPE handedness AS ENUM ('left','right','ambidextrous');
    EXCEPTION WHEN duplicate_object THEN NULL; END $$;
    """)
    op.execute("""
    DO $$ BEGIN
      CREATE TYPE medal AS ENUM ('gold','silver','bronze','none');
    EXCEPTION WHEN duplicate_object THEN NULL; END $$;
    """)
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('athlete_achievements',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('athlete_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('result', sa.String(), nullable=True),
    sa.Column(
        'medal',
        postgresql.ENUM(name='medal', create_type=False),  # reference existing enum by name
        nullable=True
    ),
    sa.Column('position', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('display_order', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('athlete_equipment',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('athlete_id', sa.UUID(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('brand', sa.String(), nullable=True),
    sa.Column('model', sa.String(), nullable=True),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('display_order', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('athlete_qualifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('athlete_id', sa.UUID(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('score', sa.Numeric(precision=6, scale=2), nullable=False),
    sa.Column('event', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('athlete_stats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('athlete_id', sa.UUID(), nullable=False),
    sa.Column('win_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('average_arrow', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('tiebreak_win_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('extras', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('athlete_id')
    )
    with op.batch_alter_table('athletes', schema=None) as batch_op:
        batch_op.alter_column('gallery',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text("'[]'::jsonb"))
        batch_op.alter_column('socials',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
        batch_op.alter_column('sponsors',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text("'[]'::jsonb"))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
        batch_op.create_index(batch_op.f('ix_athletes_full_name'), ['full_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_athletes_slug'), ['slug'], unique=True)

    with op.batch_alter_table('card_templates', schema=None) as batch_op:
        batch_op.add_column(sa.Column('template_code', sa.String(), nullable=True))
        batch_op.create_index(batch_op.f('ix_card_templates_template_code'), ['template_code'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('card_templates', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_card_templates_template_code'))
        batch_op.drop_column('template_code')

    with op.batch_alter_table('athletes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_athletes_slug'))
        batch_op.drop_index(batch_op.f('ix_athletes_full_name'))
        batch_op.alter_column('updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
        batch_op.alter_column('sponsors',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False,
               existing_server_default=sa.text("'[]'::jsonb"))
        batch_op.alter_column('socials',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
        batch_op.alter_column('gallery',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False,
               existing_server_default=sa.text("'[]'::jsonb"))

    op.drop_table('athlete_stats')
    op.drop_table('athlete_qualifications')
    op.drop_table('athlete_equipment')
    op.drop_table('athlete_achievements')
    # ### end Alembic commands ###
